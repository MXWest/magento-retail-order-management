--- pb-vanilla/src/Varien/Payment/Gateway/Gsi/Eb2c.php	2014-01-17 11:25:15.000000000 -0500
+++ pb-gsi/src/Varien/Payment/Gateway/Gsi/Eb2c.php	2014-06-10 12:33:23.000000000 -0400
@@ -68,9 +68,24 @@
             'description' => 'Store Code',
             'required' => true
         ),
+        'environment' => array(
+            'description' => 'The eBay Enterprise environment that is accessed by the ordering application. Allowed values: developer, api, beta',
+            'default' => 'api',
+            'required' => true
+        ),
+        'region' => array(
+            'description' => 'The geographic region to which the e-commerce site has been assigned. Allowed values: na, eu, ap',
+            'default' => 'na',
+            'required' => true
+        ),
+        'version' => array(
+            'description' => 'The major and minor version number of the API.',
+            'default' => '1.0',
+            'required' => false
+        ),
         'cctypes' => array(
             'description' => 'Allowed credit cards types',
-            'default' => 'AE,VI,MC,DI,OT',
+            'default' => 'AE,VI,MC,DI',
             'required' => true
         ),
         'useccv' => array(
@@ -118,9 +133,10 @@
     {
         try {
             $logId = null;
+            $url = $this->_getApiUrl($transfer);
             $xml = $this->_getXmlRequest($transfer);
-            $logId = Varien_App::debug(array('uri' => $this->_getApiUrl(), 'request' => $this->_prepareDebugXml($xml)));
-            $response = $this->_postRequest($xml);
+            $logId = Varien_App::debug(array('uri' => $url, 'request' => $this->_prepareDebugXml($xml)));
+            $response = $this->_postRequest($url, $xml);
             Varien_App::debug(array('response' => $response), $logId);
             $responseXml = @simplexml_load_string($response);
             if (!$responseXml instanceof SimpleXMLElement) {
@@ -148,7 +164,8 @@
                     $expYear = $transfer->getRequestParam(Varien_Payment_Transfer::CC_EXP_YEAR_FIELD);
                     $expDate = $this->_getExpirationDate($expMonth, $expYear);
                 }
-
+                $ccType = $transfer->getRequestParam(Varien_Payment_Transfer::CC_TYPE_FIELD);
+                $tenderCode = $this->_getTenderCode($ccType);
                 $resultFields = array(
                     'gateway_transaction_id'    => $responseArray['PaymentAccountUniqueId'],
                     'response_code'             => $responseArray['AuthorizationResponseCode'],
@@ -157,6 +174,11 @@
                     'avs_response_code'         => $responseArray['AVSResponseCode'],
                     'is_transaction_closed'     => 1,
                     'expiration_date'           => $expDate,
+                    'cc_type'                   => $ccType,
+                    'tender_code'               => $tenderCode,
+                    'name_response_code'        => $responseArray['NameResponseCode'],
+                    'phone_response_code'       => $responseArray['PhoneResponseCode'],
+                    'email_response_code'       => $responseArray['EmailResponseCode'],
                 );
                 $this->_createResponse($transfer, $resultFields);
             } else {
@@ -172,14 +194,15 @@
     /**
      * Post XML request to target URL
      *
+     * @param string $url Gateway URL
      * @param string $request Well-formed XML
      * @return string XML response
      */
-    protected function _postRequest($request)
+    protected function _postRequest($url, $request)
     {
         $headers = array('Content-Type: text/xml', 'apikey: ' . $this->_getConfigValue('api_key'));
         $http = new Varien_Http_Client(array(CURLOPT_CONNECTTIMEOUT => 20));
-        $http->write(Varien_Http_Client::POST, $this->_getApiUrl(), $headers, $request);
+        $http->write(Varien_Http_Client::POST, $url, $headers, $request);
         $http->close();
         $response = $http->readBody();
         return $response;
@@ -283,6 +306,10 @@
                 ? $this->_getAmount((string)$responseXml->AmountAuthorized) : '',
             'ExpirationDate' => isset($responseXml->ExpirationDate)
                 ? (string)$responseXml->ExpirationDate : '',
+            'NameResponseCode' => isset($responseXml->NameResponseCode)
+                ? (string)$responseXml->NameResponseCode : '',
+            'EmailResponseCode' => isset($responseXml->EmailResponseCode)
+                ? (string)$responseXml->EmailResponseCode : '',
         );
     }
 
@@ -372,12 +399,36 @@
     /**
      * Return Credit Card API target URL
      *
+     * @param Varien_Payment_Transfer $transfer
      * @return string
      */
-    protected function _getApiUrl()
+    protected function _getApiUrl(Varien_Payment_Transfer $transfer)
     {
-        return sprintf('https://beta2-na.gsipartners.com/v1.0/stores/%s/payments/creditcard/auth/VC.xml',
-            $this->_getConfigValue('store_code'));
+        $ccType = $transfer->getRequestParam(Varien_Payment_Transfer::CC_TYPE_FIELD);
+        return sprintf('https://%s-%s.gsipartners.com/v%s/stores/%s/payments/creditcard/auth/%s.xml',
+            $this->_getConfigValue('environment'),
+            $this->_getConfigValue('region'),
+            $this->_getConfigValue('version') ? $this->_getConfigValue('version') : '1.0',
+            $this->_getConfigValue('store_code'),
+            $this->_getTenderCode($ccType)
+        );
+    }
+
+    /**
+     * Return tender code for specified credit card type
+     *
+     * @param $ccType
+     * @return string Tender code for GSi gateway
+     */
+    protected function _getTenderCode($ccType)
+    {
+        $tenderMap = array(
+            'AE' => 'AM',
+            'VI' => 'VC',
+            'MC' => 'MC',
+            'DI' => 'DC',
+        );
+        return isset($tenderMap[$ccType]) ? $tenderMap[$ccType] : 'VC';
     }
 
     /**
