<?xml version='1.0' encoding="utf-8" ?>
<!--
  Copyright (c) 2013-2014 eBay Enterprise, Inc.

  NOTICE OF LICENSE

  This source file is subject to the Open Software License (OSL 3.0)
  that is bundled with this package in the file LICENSE.md.
  It is also available through the world-wide-web at this URL:
  http://opensource.org/licenses/osl-3.0.php

  @copyright   Copyright (c) 2013-2014 eBay Enterprise, Inc. (http://www.ebayenterprise.com/)
  @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
-->
<!--
Magento to Retail Order Management mappings:
The below configurations translate from Magento to the Retail Order Management system.
Copy this file to rom.xml and configure the appropriate values below.
-->
<config>
	<!--
	Configuration for setting Retail Order Management cron jobs
	-->
	<crontab>
		<jobs>
			<eb2corder_order_create_retry>
				<schedule>
					<cron_expr>*/15 * * * *</cron_expr>
				</schedule>
			</eb2corder_order_create_retry>
			<!--
			Configuration for setting the Image Export Cron runtimes
			 -->
			<ebayenterprise_productimageexport>
				<schedule>
					<cron_expr>*/15 * * * *</cron_expr>
				</schedule>
			</ebayenterprise_productimageexport>
			<!--
			Configuration for setting the AMQP queue processing schedule.
			-->
			<ebayenterprise_amqp_runner_process_queues>
				<schedule>
					<cron_expr>*/5 * * * *</cron_expr>
				</schedule>
			</ebayenterprise_amqp_runner_process_queues>
		</jobs>
	</crontab>
	<default>
		<eb2ccore>
			<!--
			Shipping method mappings:
			Map Magento shipping methods to the desired Retail Order Management shipping method name. Add one node for each configured Magento shipping method.
			-->
			<shipmap>
				<!-- This example maps the Magento flatrate_flatrate shipping method to ANY_STD shipping in Retail Order Management. -->
				<flatrate_flatrate>ANY_STD</flatrate_flatrate>
			</shipmap>
		</eb2ccore>
		<ebayenterprise_amqp>
			<!--
			Configuration for the order events AMQP SDK. Most of this information
			will be provided by eBay Enterprise. Unless otherwise noted, the
			provided sample values should suffice for most uses.
			-->
			<general>
				<!--
				Number of messages the SDK will fetch at one time from a single queue.
				-->
				<number_of_messages_to_process>15</number_of_messages_to_process>
			</general>
			<connection>
				<!--
				`connection_type` specifies the type of connection to establish with the
				AMQP server. The connection_type must match to a connection
				class in PhpAmqpLib and be supported the ROM-SDK. Currently supported
				connection types are:
				- \PhpAmqpLib\Connection\AMQPConnection
				- \PhpAmqpLib\Connection\AMQPSSLConnection
				-->
				<type>\PhpAmqpLib\Connection\AMQPSSLConnection</type>
				<!--
				`connection_context` provides additional connection data. Depending on
				the type of connection being established, this may need to include
				additional child nodes required for creating the connection.

				For non-AMQPSSLConnection, can simply be empty.
				-->
				<context>
					<verify_peer>0</verify_peer>
				</context>
				<!--
				Port the AMQP server is listening on. For SSL connections, typically 443.
				For non-SSL connections, typically 5672.
				-->
				<port>443</port>
				<vhost>/</vhost>
				<insist>0</insist>
				<login_method></login_method>
				<locale>en-US</locale>
				<timeout>3</timeout>
				<read_write_timeout>3</read_write_timeout>
			</connection>
			<queue>
				<queue_names>
					<!--
					Names of the various queues messages may be sent to. Queue names
					containing {store_id} will have the placeholder replaced by the
					current configured store id. More queues can be added to receive
					messages from additional queues.
					-->
					<orders>q.Order.Event.{store_id}</orders>
				</queue_names>
				<passive>0</passive>
				<durable>1</durable>
				<exclusive>0</exclusive>
				<auto_delete>0</auto_delete>
				<nowait>0</nowait>
				<binding_nowait>0</binding_nowait>
			</queue>
		</ebayenterprise_amqp>
		<ebayenterprise_creditcard>
			<tender_types>
				<!--
				Mappings of Magento credit card type to ROM API tender type. Node names
				must match the credit card code as configured in Mage_Payment's etc/config.xml.
				Values must match tender types supported by the ROM payment service.
				-->
				<AE>AM</AE>
				<DI>DC</DI>
				<MC>MC</MC>
				<VI>VC</VI>
			</tender_types>
		</ebayenterprise_creditcard>
		<ebayenterprise_giftcard>
			<!--
			Gift Card Number Ranges:
			List the ranges for valid gift card numbers of each eBay Enterprise
			Retail Order Management tender type.
			Ranges may not overlap.
			-->
			<card_number_bin_ranges>
				<!-- Gift card -->
				<GS>800199900000000-800199910000000</GS>
				<!-- Physical card -->
				<SP>6006592800000000000-6006592800100000000</SP>
				<!-- Virtual card -->
				<SV>6969280000000000-6969280010000000</SV>
				<!-- Value Link -->
				<VL>9900000000000000-9900000010000000</VL>
			</card_number_bin_ranges>
		</ebayenterprise_giftcard>
	</default>
</config>
