<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) 2013-2014 eBay Enterprise, Inc.

  NOTICE OF LICENSE

  This source file is subject to the Open Software License (OSL 3.0)
  that is bundled with this package in the file LICENSE.md.
  It is also available through the world-wide-web at this URL:
  http://opensource.org/licenses/osl-3.0.php

  @copyright   Copyright (c) 2013-2014 eBay Enterprise, Inc. (http://www.ebayenterprise.com/)
  @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
-->
<config>
	<modules>
		<EbayEnterprise_Eb2cCore>
			<version>0.9.0</version>
		</EbayEnterprise_Eb2cCore>
	</modules>
	<global>
		<models>
			<eb2ccore>
				<class>EbayEnterprise_Eb2cCore_Model</class>
			</eb2ccore>
		</models>
		<helpers>
			<eb2ccore>
				<class>EbayEnterprise_Eb2cCore_Helper</class>
			</eb2ccore>
		</helpers>
		<blocks>
			<eb2ccore>
				<class>EbayEnterprise_Eb2cCore_Block</class>
			</eb2ccore>
		</blocks>
		<events>
			<sales_quote_collect_totals_before>
				<observers>
					<eb2ccore_update_quote_session>
						<class>EbayEnterprise_Eb2cCore_Model_Observer</class>
						<method>checkQuoteForChanges</method>
						<type>singleton</type>
					</eb2ccore_update_quote_session>
				</observers>
			</sales_quote_collect_totals_before>
			<sales_order_place_before>
				<observers>
					<eb2ccore_place_exchange_platform_order>
						<class>eb2ccore/observer</class>
						<method>processExchangePlatformOrder</method>
						<type>singleton</type>
					</eb2ccore_place_exchange_platform_order>
				</observers>
			</sales_order_place_before>
			<sales_model_service_quote_submit_failure>
				<observers>
					<eb2ccore_rollback_order_failuer>
						<class>eb2ccore/observer</class>
						<method>rollbackExchangePlatformOrder</method>
						<type>singleton</type>
					</eb2ccore_rollback_order_failuer>
				</observers>
			</sales_model_service_quote_submit_failure>
			<controller_action_postdispatch_checkout_onepage_saveOrder>
				<observers>
					<eb2ccore_add_onepage_checkout_redirect_response>
						<class>eb2ccore/observer</class>
						<method>addOnepageCheckoutRedirectResponse</method>
						<type>singleton</type>
					</eb2ccore_add_onepage_checkout_redirect_response>
				</observers>
			</controller_action_postdispatch_checkout_onepage_saveOrder>
			<filetransfer_import_complete>
				<observers>
					<eb2c_export_run_acks>
						<class>eb2ccore/feed_export_ack</class>
						<method>process</method>
						<type>model</type>
					</eb2c_export_run_acks>
				</observers>
			</filetransfer_import_complete>
		</events>
	</global>
	<admin>
		<routers>
			<adminhtml>
				<args>
					<modules>
						<EbayEnterprise_Eb2cCore after="Mage_Adminhtml">EbayEnterprise_Eb2cCore</EbayEnterprise_Eb2cCore>
					</modules>
				</args>
			</adminhtml>
		</routers>
	</admin>
	<adminhtml>
		<translate>
			<modules>
				<EbayEnterprise_Eb2cCore>
					<files>
						<default>EbayEnterprise_Eb2cCore.csv</default>
					</files>
				</EbayEnterprise_Eb2cCore>
			</modules>
		</translate>
	</adminhtml>
	<crontab>
		<jobs>
			<eb2cinventory_feed_item_inventories>
				<run>
					<model>eb2cinventory/feed_item_inventories::processFeeds</model>
				</run>
			</eb2cinventory_feed_item_inventories>
			<eb2cproduct_feed>
				<run>
					<model>eb2cproduct/feed::processFeeds</model>
				</run>
			</eb2cproduct_feed>
		</jobs>
	</crontab>
	<default>
		<eb2ccore>
			<general>
				<catalog_id/>
				<client_customer_id_prefix/>
				<client_id/>
				<client_order_id_prefix/>
				<language_code/>
				<store_id/>
			</general>
			<api>
				<hostname></hostname>
				<key backend_model="adminhtml/system_config_backend_encrypted"/>
				<major_version>1</major_version>
				<minor_version>0</minor_version>
				<region>na</region>
				<timeout/>
				<xml_namespace><![CDATA[http://api.gsicommerce.com/schema/checkout/1.0]]></xml_namespace>
				<xsd_path><![CDATA[app/code/community/EbayEnterprise/Eb2cCore/xsd]]></xsd_path>
				<default_status_handlers>
					<loud>
						<alert_level>loud</alert_level>
						<status>
							<no_response>
								<logger>logWarn</logger>
								<callback>
									<type>helper</type>
									<class>eb2ccore/api_action</class>
									<method>displayDefaultMessage</method>
								</callback>
							</no_response>
							<server_error>
								<logger>logWarn</logger>
								<callback>
									<type>helper</type>
									<class>eb2ccore/api_action</class>
									<method>displayDefaultMessage</method>
								</callback>
							</server_error>
						</status>
					</loud>
					<silent>
						<alert_level>silent</alert_level>
						<status>
							<no_response>
								<logger>logWarn</logger>
								<callback>
									<type>helper</type>
									<class>eb2ccore/api_action</class>
									<method>returnEmpty</method>
								</callback>
							</no_response>
							<server_error>
								<logger>logWarn</logger>
								<callback>
									<type>helper</type>
									<class>eb2ccore/api_action</class>
									<method>returnEmpty</method>
								</callback>
							</server_error>
							<client_error>
								<logger>logCrit</logger>
								<callback>
									<type>helper</type>
									<class>eb2ccore/api_action</class>
									<method>throwException</method>
								</callback>
							</client_error>
							<success>
								<logger>logInfo</logger>
								<callback>
									<type>helper</type>
									<class>eb2ccore/api_action</class>
									<method>returnBody</method>
								</callback>
							</success>
						</status>
					</silent>
				</default_status_handlers>
				<test_connection_status_handlers>
					<alert_level>silent</alert_level>
					<status>
						<no_response>
							<logger>logInfo</logger>
							<callback>
								<type>helper</type>
								<class>eb2ccore/api_validator</class>
								<method>returnInvalidHostnameResponse</method>
							</callback>
						</no_response>
						<server_error>
							<logger>logInfo</logger>
							<callback>
								<type>helper</type>
								<class>eb2ccore/api_validator</class>
								<method>returnUnknownErrorResponse</method>
							</callback>
						</server_error>
						<client_error>
							<logger>logInfo</logger>
							<callback>
								<type>helper</type>
								<class>eb2ccore/api_validator</class>
								<method>returnClientErrorResponse</method>
							</callback>
						</client_error>
						<success>
							<logger>logInfo</logger>
							<callback>
								<type>helper</type>
								<class>eb2ccore/api_validator</class>
								<method>returnSuccessResponse</method>
							</callback>
						</success>
					</status>
				</test_connection_status_handlers>
			</api>
			<feed>
				<destination_type>MAILBOX</destination_type>
				<filetransfer_protocol>sftp</filetransfer_protocol>
				<filetransfer_sftp_auth_type>pub_key</filetransfer_sftp_auth_type>
				<!--
				Archive directories for all acknowledged imported and exported files
				-->
				<import_archive>ExchangePlatform/Feed/archive/import</import_archive>
				<export_archive>ExchangePlatform/Feed/archive/export</export_archive>
				<processing_directory>ExchangePlatform/Feed/processing</processing_directory>
				<available_models>
					<eb2cinventory>
						<feed_item_inventories>1</feed_item_inventories>
					</eb2cinventory>
					<eb2corder>
						<status_feed>1</status_feed>
					</eb2corder>
					<eb2cproduct>
						<feed>1</feed>
					</eb2cproduct>
				</available_models>
				<filetransfer_imports>
					<acknowledgements>
						<!-- Local directory is relative to Magento's 'var' directory -->
						<local_directory>ExchangePlatform/Feed/inbox/ack</local_directory>
						<remote_directory>/Inbox</remote_directory>
						<file_pattern>*Ack*.xml</file_pattern>
					</acknowledgements>
					<order_status_feed>
						<local_directory>ExchangePlatform/Feed/inbox/order</local_directory>
						<remote_directory>/Inbox/</remote_directory>
						<file_pattern>*OrderStatus_*.xml</file_pattern>
					</order_status_feed>
				</filetransfer_imports>
				<filetransfer_exports>
					<acknowledgements>
						<!-- Local directory is always relative to Magento's configured 'var' directory. -->
						<local_directory>ExchangePlatform/Feed/outbox/ack</local_directory>
						<remote_directory>/Inbox</remote_directory>
						<!--
						Sent acks can go straight to archive as there will never be
						a received ack for a sent ack nor will we ever need to resent them.
						-->
						<sent_directory>ExchangePlatform/Feed/archive/export/ack</sent_directory>
						<filename_format>ack_{eventtype}_{clientid}_{storeid}_{timestamp}.xml</filename_format>
						<timestamp_format>YmdHis</timestamp_format>
						<xsd>AcknowledgementV11.xsd</xsd>
					</acknowledgements>
					<error_confirmations>
						<local_directory>ExchangePlatform/Feed/outbox/error</local_directory>
						<remote_directory>/</remote_directory>
						<!--
						Sent error confirmations can go straight to archive as there will
						never be a received ack for a sent error confirmation nor will we
						ever need to resent them.
						-->
						<sent_directory>ExchangePlatform/Feed/archive/export/error</sent_directory>
						<filename_format>{client_id}_{catalog_id}_{store_id}_errorconfirmation_{feed_type}_{time_stamp}.xml</filename_format>
					</error_confirmations>
					<!--
					This outbox can be used for any other files that need to be exported.
					This should largely prevent other modules from needing to provide
					any further export configuration and provide a single known point
					for all export configuration.
					-->
					<eb2c_outbox>
						<local_directory>ExchangePlatform/Feed/outbox/</local_directory>
						<remote_directory>/</remote_directory>
						<sent_directory>ExchangePlatform/Feed/sent/</sent_directory>
					</eb2c_outbox>
				</filetransfer_exports>
				<outbound>
					<message_header>
						<standard>GSI</standard>
						<header_version>NGP1_0_0</header_version>
						<version_release_number>NGP1_0_0</version_release_number>
						<destination_id>PHUB</destination_id>
						<destination_type>PHUB</destination_type>
						<source_type>Client</source_type>
						<source_id>
							<type>helper</type>
							<class>eb2ccore/feed</class>
							<method>getClientId</method>
						</source_id>
						<message_id>
							<type>helper</type>
							<class>eb2ccore/feed</class>
							<method>getMessageId</method>
						</message_id>
						<correlation_id>
							<type>helper</type>
							<class>eb2ccore/feed</class>
							<method>getCorrelationId</method>
						</correlation_id>
						<create_date_and_time>
							<type>helper</type>
							<class>eb2ccore/feed</class>
							<method>getCreatedDateTime</method>
						</create_date_and_time>
					</message_header>
					<file_name>
						<time_stamp>
							<type>helper</type>
							<class>eb2ccore/feed</class>
							<method>getTimeStamp</method>
						</time_stamp>
						<client_id>
							<type>helper</type>
							<class>eb2ccore/feed</class>
							<method>getClientId</method>
						</client_id>
						<catalog_id>
							<type>helper</type>
							<class>eb2ccore/feed</class>
							<method>getCatalogId</method>
						</catalog_id>
						<store_id>
							<type>helper</type>
							<class>eb2ccore/feed</class>
							<method>getStoreId</method>
						</store_id>
					</file_name>
					<file_pattern>Export_{feed_type}_{client_id}_{catalog_id}_{store_id}_{time_stamp}.xml</file_pattern>
				</outbound>
				<header_template><![CDATA[<MessageHeader>
		<Standard>{standard}</Standard>
		<HeaderVersion>{header_version}</HeaderVersion>
		<VersionReleaseNumber>{version_release_number}</VersionReleaseNumber>
		<SourceData>
			<SourceId>{source_id}</SourceId>
			<SourceType>{source_type}</SourceType>
		</SourceData>
		<DestinationData>
			<DestinationId>{destination_id}</DestinationId>
			<DestinationType>{destination_type}</DestinationType>
		</DestinationData>
		<EventType>{event_type}</EventType>
		<MessageData>
			<MessageId>{message_id}</MessageId>
			<CorrelationId>{correlation_id}</CorrelationId>
		</MessageData>
		<CreateDateAndTime>{create_date_and_time}</CreateDateAndTime>
	</MessageHeader>]]></header_template>
			</feed>
			<service>
				<order>
					<timeout>15</timeout>
				</order>
				<payment>
					<timeout>17</timeout>
				</payment>
				<inventory>
					<expiration>15</expiration>
				</inventory>
			</service>
		</eb2ccore>
		<filetransfer>
			<registry>
				<eb2ccore_filetransfer_registry>eb2ccore/feed</eb2ccore_filetransfer_registry>
			</registry>
		</filetransfer>
	</default>
	<phpunit>
		<suite>
			<modules>
				<EbayEnterprise_Eb2cCore/>
			</modules>
		</suite>
	</phpunit>
</config>
